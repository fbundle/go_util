package vec

import (
	"math/bits"
	"sync"
	"sync/atomic"
)

func Map[T1 any, T2 any](v Vec[T1], f func(int, T1) T2) {
	w := Make[T2](v.Len())
	wg := sync.WaitGroup{}
	for i := 0; i < v.Len(); i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			w.data[i] = f(i, v.data[i])
		}(i)
	}
	wg.Wait()
}

func Filter[T any](v Vec[T], f func(int, T) bool) Vec[T] {
	w := Make[T](v.Len())
	n := atomic.Uint64{}
	wg := sync.WaitGroup{}
	for i := 0; i < v.Len(); i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			if f(i, v.data[i]) {
				nn := n.Add(1) - 1
				w.data[nn] = v.data[i]
			}
		}(i)
	}
	wg.Wait()
	return w.Slice(0, int(n.Load()))
}

// nextPowerOfTwo : return the smallest power of 2 greater than x (code generated by chatgpt)
func nextPowerOfTwo(x uint64) uint64 {
	if x == 0 {
		return 1
	}
	if x > 1<<63 {
		panic("next power of 2 overflows uint64")
	}
	return 1 << (64 - bits.LeadingZeros64(x-1))
}
func Reduce[T any](w Vec[T], f func(int, int, T, T) T) T {
	v := w.Clone()
	v = v.Slice(0, int(nextPowerOfTwo(uint64(v.Len()))))

	for v.Len() > 1 {
		wg := sync.WaitGroup{}
		for i := 0; i < v.Len()/2; i++ {
			j := v.Len()/2 + i
			wg.Add(1)
			go func(i int, j int) {
				defer wg.Done()
				v.data[i] = f(i, j, v.data[i], v.data[j])
			}(i, j)
		}
		wg.Wait()
	}
	return v.data[0]
}
